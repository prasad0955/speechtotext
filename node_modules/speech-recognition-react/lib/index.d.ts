/// <reference types="dom-speech-recognition" />
export declare type SpeechRecognitionEventHandler = ((event: SpeechRecognitionEvent) => void) | null;
export interface StartOptions {
    continuous?: boolean;
    grammar?: string;
    interimResults?: boolean;
    lang?: string;
    maxAlternatives?: number;
    regex?: RegExp;
}
export interface SpeechRecognitionOptions extends StartOptions {
    startOnLoad?: boolean;
    onaudioend?: SpeechRecognitionEventHandler;
    onaudiostart?: SpeechRecognitionEventHandler;
    onend?: SpeechRecognitionEventHandler;
    onerror?: ((event: SpeechRecognitionErrorEvent) => void) | null;
    onnomatch?: SpeechRecognitionEventHandler;
    onresult?: SpeechRecognitionEventHandler;
    onsoundend?: SpeechRecognitionEventHandler;
    onsoundstart?: SpeechRecognitionEventHandler;
    onspeechend?: SpeechRecognitionEventHandler;
    onspeechstart?: SpeechRecognitionEventHandler;
    onstart?: SpeechRecognitionEventHandler;
}
export interface Transcript {
    id: string;
    confidence: number;
    isFinal: boolean;
    transcript: string;
}
export interface SpeechRecognitionObject {
    liveTranscript: string;
    match: string | null;
    restart: (startOptions?: StartOptions) => void;
    start: (startOptions?: StartOptions) => void;
    transcripts: Transcript[];
    abort: () => void;
    instance: SpeechRecognition;
    stop: () => void;
}
export declare const useSpeechRecognition: (options?: SpeechRecognitionOptions | undefined) => SpeechRecognitionObject;
